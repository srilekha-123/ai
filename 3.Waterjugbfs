#3.Waterjug-BFS
def fill_empty(k,j1,j2):
    l=[]
    if k[0]<j1:
        l.append([j1,k[1]])
    if k[1]<j2:
        l.append([k[0],j2])
    if k[0]>0:
        l.append([0,k[1]])
    if k[1]>0:
        l.append([k[0],0])
    if k[0]+k[1]>=j1 and k[1]>0:
        l.append([j1,k[1]-(j1-k[0])])
    if k[0]+k[1]>=j2 and k[0]>0:
        l.append([k[0]-(j2-k[1]),j2])
    if k[0]+k[1]<=j1 and k[1]>=0:
        l.append([k[0]+k[1],0])
    if k[0]+k[1]<=j2 and k[0]>=0:
        l.append([0,k[0]+k[1]])
    return l
    print(l)
def wbfs(j1,j2,goal):
    f=[[0,0]]
    e=[]
    z=f[0]
    while(1):
        if z[0]==goal or z[1]==goal:
            e.append(z)
            return e
        k=fill_empty(z,j1,j2)
        for i in k:
            if i not in f and i not in e:
                f.append(i)
        e.append(z)
        f.remove(z)
        if len(f)==0:
            return -1
        z=f[0]
j1=5
j2=3
g=2
if wbfs(j1,j2,g)==-1:
    print("no goal state")
else:
    print("goal reached")
    print(wbfs(j1,j2,g))
